@model IEnumerable<Tiss_MindRadar.Models.RadarChartVIewModel>
@using Newtonsoft.Json
@{
    ViewBag.Title = "心理狀態檢測向度雷達圖";
    Layout = "~/Views/Shared/_MindRadarLayout.cshtml";
}
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>心理狀態檢測向度雷達圖</title>
    <script src="~/RadarChartJS/chart.js"></script>
    <script src="~/RadarChartJS/chartjs-plugin-datalabels@2.2.js"></script>
    <link href="~/MindRadarCss/MentalStateRadarChart.css" rel="stylesheet" />
</head>
<body class="bg-gray-100">
    <div class="container mx-auto p-6 max-w-full">
        <div class="header-container">
            <div class="user-info">
                受訪者: @ViewBag.UserName <span class="text-lg text-gray-600">(年齡: @ViewBag.Age 歲 | 隊伍: @ViewBag.TeamName)</span>
            </div>
            <div class="flex justify-end space-x-4 mb-4">
                @if (Session["UserID"] != null)
                {
                    <a href="@Url.Action("Logout", "UserAccount")" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">登出</a>
                }
                <a href="@Url.Action("MentalState", "Survey")" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg shadow-md">返回心理狀態檢測題目頁</a>
            </div>
        </div>

        <h1 class="text-2xl font-bold text-center mb-6 text-gray-800">心理狀態檢測向度雷達圖</h1>
        <div id="mainContent">
            <form id="radarChartForm" method="POST" action="@Url.Action("MentalStateRadarChart", "ChartRadar")">
                @Html.AntiForgeryToken()
                <label class="block text-gray-700 font-bold mb-2">選擇要比較的日期：</label>
                <div id="dateCheckboxContainer" class="flex flex-wrap gap-2 mb-4">
                    @foreach (var date in ViewBag.SurveyDates as List<DateTime>)
                    {
                        <label class="inline-flex items-center">
                            <input type="checkbox" name="surveyDates" class="form-checkbox h-5 w-5 text-blue-600" value="@date.ToString("yyyy-MM-dd")">
                            <span class="ml-2">@date.ToString("yyyy/MM/dd")</span>
                        </label>
                    }
                </div>
                <button type="button" id="updateChartBtn" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">更新雷達圖</button>
            </form>
            <div class="radar-chart-container mt-4">
                <canvas id="radarChart" width="580" height="580"></canvas>
            </div>
            <script id="radarData" type="application/json">
                @Html.Raw(JsonConvert.SerializeObject(Model))
            </script>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            attachEventListeners();
            initRadarChart();
        });

        function attachEventListeners() {
            document.querySelectorAll("#dateCheckboxContainer input[type='checkbox']").forEach(cb => {
                cb.addEventListener("change", enforceMaxSelection);
            });
            document.getElementById("updateChartBtn").addEventListener("click", updateRadarChart);
        }

        function enforceMaxSelection() {
            const checked = document.querySelectorAll("#dateCheckboxContainer input:checked");
            if (checked.length > 3) {
                checked[checked.length - 1].checked = false;
                Swal.fire({ icon: 'warning', title: '最多只能選擇 3 個日期', text: '請取消一個再選擇其他日期！', confirmButtonText: '確定' });
            }
        }

        function updateRadarChart() {
            const selectedDates = Array.from(document.querySelectorAll("#dateCheckboxContainer input:checked")).map(cb => cb.value);
            if (selectedDates.length === 0) {
                Swal.fire({ icon: 'warning', title: '請選擇至少一個日期', text: '請勾選至少一個日期以生成雷達圖！', confirmButtonText: '確定' });
                return;
            }

            const csrfToken = document.querySelector("input[name='__RequestVerificationToken']").value;
            const formData = new URLSearchParams();
            selectedDates.forEach(date => formData.append("surveyDates", date));
            formData.append("__RequestVerificationToken", csrfToken);

            fetch("@Url.Action("MentalStateRadarChart", "ChartRadar")", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: formData.toString()
            })
                .then(res => res.text())
                .then(html => {
                    const tempDiv = document.createElement("div");
                    tempDiv.innerHTML = html;

                    const newChartContainer = tempDiv.querySelector(".radar-chart-container");
                    const chartContainer = document.querySelector(".radar-chart-container");
                    if (chartContainer && newChartContainer) {
                        chartContainer.innerHTML = newChartContainer.innerHTML;
                    }

                    const newRadarDataElement = tempDiv.querySelector("#radarData");
                    const newRadarData = JSON.parse(newRadarDataElement?.textContent || "[]");

                    if (window.myRadarChart) window.myRadarChart.destroy();
                    if (newRadarData.length > 0) renderRadarChart("radarChart", newRadarData);
                });
        }

        function initRadarChart() {
            const radarDataElement = document.getElementById("radarData");
            const radarData = radarDataElement ? JSON.parse(radarDataElement.textContent) : [];
            if (radarData.length > 0) {
                renderRadarChart("radarChart", radarData);
            }
        }

        function renderRadarChart(canvasId, radarData) {
            const ctx = document.getElementById(canvasId).getContext("2d");
            const grouped = {};
            radarData.forEach(item => {
                if (!grouped[item.SurveyDate]) grouped[item.SurveyDate] = [];
                grouped[item.SurveyDate].push(item);
            });
            const labels = [...new Set(radarData.map(x => `${x.Dimension} - ${x.CategoryName}`))];
            const colorSet = [
                "rgba(255,99,132,0.6)", "rgba(54,162,235,0.6)", "rgba(255,206,86,0.6)",
                "rgba(75,192,192,0.6)", "rgba(153,102,255,0.6)"
            ];
            const datasets = Object.keys(grouped).map((date, index) => {
                const group = grouped[date];
                const dataValues = labels.map(label => {
                    const item = group.find(x => `${x.Dimension} - ${x.CategoryName}` === label);
                    return item ? item.AverageScore : 0;
                });
                return {
                    label: `心理狀態分數（${date}）`,
                    data: dataValues,
                    backgroundColor: colorSet[index % colorSet.length],
                    borderColor: colorSet[index % colorSet.length].replace("0.6", "1"),
                    borderWidth: 2,
                    pointRadius: 5,
                    pointHoverRadius: 7
                };
            });

            window.myRadarChart = new Chart(ctx, {
                type: "radar",
                data: { labels: labels, datasets: datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: true, position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return `分數: ${tooltipItem.raw}`;
                                }
                            }
                        },
                        datalabels: {
                            color: "black",
                            font: { weight: "bold", size: 12 },
                            anchor: "end",
                            align: "top",
                            formatter: (v) => v.toFixed(1)
                        }
                    },
                    scales: {
                        r: {
                            suggestedMin: 0,
                            suggestedMax: 5,
                            ticks: { stepSize: 1 },
                            pointLabels: { font: { size: 14 } }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });
        }
    </script>
</body>
</html>