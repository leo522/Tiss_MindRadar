@model IEnumerable<Tiss_MindRadar.Models.RadarChartVIewModel>
@using Newtonsoft.Json
@{
    ViewBag.Title = "心理狀態檢測向度雷達圖";
    Layout = "~/Views/Shared/_MindRadarLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>心理狀態檢測向度雷達圖</title>
    <script src="~/RadarChartJS/chart.js"></script>@*雷達圖*@
    <script src="~/RadarChartJS/chartjs-plugin-datalabels@2.2.js"></script> @*雷達圖插件*@
    <link href="~/MindRadarCss/MentalStateRadarChart.css" rel="stylesheet" />
    <link href="~/MindRadarCss/PsychologicalDescriptionsStyle.css" rel="stylesheet" />@*向度說明色塊*@
    <script src="~/RadarChartJS/MentalStateRadarChart.js"></script> @*計算各日期區間檢測結果&高低分*@
</head>
<body class="bg-gray-100">
    <div class="container mx-auto p-6 max-w-full">
        <div class="header-container">
            <div class="user-info">
                受訪者: @ViewBag.UserName <span class="text-lg text-gray-600">(年齡: @ViewBag.Age 歲 | 隊伍: @ViewBag.TeamName)</span>
            </div>
            <div class="flex justify-end space-x-4 mb-4">
                @if (Session["UserID"] != null)
                {
                    <a href="@Url.Action("Logout", "UserAccount")"
                       class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                        登出
                    </a>
                }
                <a href="@Url.Action("MentalState", "Survey")"
                   class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg shadow-md">
                    返回心理狀態檢測題目頁
                </a>
            </div>
        </div>
        <h1 class="text-2xl font-bold text-center mb-6 text-gray-800">心理狀態檢測向度雷達圖</h1>
        <div id="mainContent">
            <form id="radarChartForm" method="POST" action="@Url.Action("MentalStateRadarChart", "ChartRadar")">
                @Html.AntiForgeryToken()
                <label class="block text-gray-700 font-bold mb-2">選擇要比較的日期：</label>
                <div id="dateCheckboxContainer" class="flex flex-wrap gap-2 mb-4">
                    @foreach (var date in ViewBag.SurveyDates as List<DateTime>)
                    {
                        <label class="inline-flex items-center">
                            <input type="checkbox" name="surveyDates" class="form-checkbox h-5 w-5 text-blue-600" value="@date.ToString("yyyy-MM-dd")"
                                   @(ViewBag.SelectedDates != null && ViewBag.SelectedDates.Contains(date) ? "checked" : "")>
                            <span class="ml-2">@date.ToString("yyyy/MM/dd")</span>
                        </label>
                    }
                </div>
                <button type="button" id="updateChartBtn" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">
                    更新雷達圖
                </button>
            </form>
            <div class="radar-chart-container mt-4">
                <canvas id="radarChart" width="580" height="580"></canvas>@*產生雷達圖*@
            </div>

            <script id="radarData" type="application/json">
                @Html.Raw(JsonConvert.SerializeObject(Model))
            </script>
        </div>
        <div class="mt-6">
            <h2 class="text-xl font-bold text-gray-800 mb-4">運動心理技能說明</h2>
            <table class="min-w-full w-full bg-white shadow-md rounded border border-gray-300">

                <tbody>
                    @if (ViewBag.PsychologicalHeaders != null && ViewBag.PsychologicalDescriptions != null && ViewBag.MentalStateQuestions != null)
                    {
                        var descriptions = ViewBag.PsychologicalDescriptions as List<Tiss_MindRadar.Models.PsychologicalStateDescription>;
                        var questions = ViewBag.MentalStateQuestions as List<Tiss_MindRadar.Models.MentalState>;

                        string currentCategory = null;

                        var categoryRowSpans = descriptions.GroupBy(d => d.CategoryName)
                            .ToDictionary(g => g.Key, g => g.Count());

                        var categoryItemIndex = new Dictionary<string, int>();

                        foreach (var header in ViewBag.PsychologicalHeaders)
                        {
                            // 取得對應 `HeaderText` 的第一個 `CategoryName`
                            var firstCategory = descriptions.FirstOrDefault(d => d.HeaderID == header.ID)?.CategoryName ?? "";

                            // 根據分類名稱來決定標題背景顏色
                            string headerClass = firstCategory.Contains("基礎心理技能") ? "bg-yellow-200" :
                                                 firstCategory.Contains("身體心理技能") ? "bg-orange-300" :
                                                 firstCategory.Contains("認知技能") ? "bg-blue-300" : "bg-gray-200";

                            <tr class="@headerClass">
                                <td colspan="4" class="py-3 px-6 font-bold text-lg">@header.HeaderText</td>
                            </tr>

                            var filteredDescriptions = descriptions.Where(d => d.HeaderID == header.ID).ToList();

                            foreach (var item in filteredDescriptions)
                            {
                                string categoryClass = item.CategoryName.Contains("基礎心理技能") ? "bg-yellow-200" :
                                                       item.CategoryName.Contains("身體心理技能") ? "bg-orange-300" :
                                                       item.CategoryName.Contains("認知技能") ? "bg-blue-300" : "";

                                if (!categoryItemIndex.ContainsKey(item.CategoryName))
                                {
                                    categoryItemIndex[item.CategoryName] = 1;
                                }
                                else
                                {
                                    categoryItemIndex[item.CategoryName]++;
                                }

                <tr class="border-b border-gray-200">
                    @if (currentCategory != item.CategoryName)
                    {
                        int categoryRowSpan = categoryRowSpans[item.CategoryName];
                        <td class="py-3 px-6 text-left font-bold @categoryClass category-title" rowspan="@categoryRowSpan">
                            @item.CategoryName
                    </td>
                    currentCategory = item.CategoryName;
                }
                    <td class="py-3 px-6 text-left skill-title">@categoryItemIndex[item.CategoryName]. @item.SubCategory</td>
                    <td class="py-3 px-6 text-left">@item.DescriptionContent</td>
                    <td class="py-3 px-6 text-left">
                        <ul class="list-disc ml-5">
                            @foreach (var question in questions.Where(q => q.CategoryID == item.ID).OrderBy(q => q.QuestionNumber))
                            {
                                <li>@question.QuestionNumber. @question.QuestionText</li>
                            }
                        </ul>
                    </td>
                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
</div>

<script>
       document.addEventListener("DOMContentLoaded", function () {
    attachEventListeners();
    initRadarChart();
});

//綁定事件
function attachEventListeners() {
    document.querySelectorAll("#dateCheckboxContainer input[type='checkbox']").forEach(checkbox => {
        checkbox.addEventListener("change", function () {
            enforceMaxSelection();
        });
    });

    document.getElementById("updateChartBtn").addEventListener("click", function () {
        updateRadarChart();
    });
}

// 限制最多選擇 3 個日期
function enforceMaxSelection() {
    const checkboxes = document.querySelectorAll("#dateCheckboxContainer input[type='checkbox']");
    const checked = document.querySelectorAll("#dateCheckboxContainer input:checked");

    if (checked.length > 3) {
        checked[checked.length - 1].checked = false;
        Swal.fire({
            icon: 'warning',
            title: '最多只能選擇 3 個日期',
            text: '請取消一個再選擇其他日期！',
            confirmButtonText: '確定'
        });
    }
}

// 取得並更新雷達圖
function updateRadarChart() {
    const selectedDates = [];
    document.querySelectorAll("#dateCheckboxContainer input:checked").forEach(checkbox => {
        selectedDates.push(checkbox.value);
    });

    if (selectedDates.length === 0) {
        Swal.fire({
            icon: 'warning',
            title: '請選擇至少一個日期',
            text: '請勾選至少一個日期以生成雷達圖！',
            confirmButtonText: '確定'
        });
        return;
    }

    //獲取 CSRF Token
    const csrfTokenElement = document.querySelector("input[name='__RequestVerificationToken']");
    if (!csrfTokenElement) {
        console.error("CSRF Token 不存在");
        return;
    }
    const csrfToken = csrfTokenElement.value;

    // 轉換為 `application/x-www-form-urlencoded` 格式
    const formData = new URLSearchParams();
    selectedDates.forEach(date => formData.append("surveyDates", date));
    formData.append("__RequestVerificationToken", csrfToken);

    fetch("/ChartRadar/MentalStateRadarChart", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: formData.toString()
    })
    .then(response => response.text())
    .then(html => {
        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = html;

        const mainContent = document.getElementById("mainContent");
        if (!mainContent) {
            console.error("Error: 頁面不存在，無法更新內容");
            return;
        }

        const newChartContainer = tempDiv.querySelector(".radar-chart-container");
        const chartContainer = document.querySelector(".radar-chart-container");

        if (chartContainer && newChartContainer) {
            chartContainer.innerHTML = newChartContainer.innerHTML;
        }

        const newRadarDataElement = tempDiv.querySelector("#radarData");
        if (!newRadarDataElement) {
            console.error("Error: 日期不存在，無法更新");
            Swal.fire({
                icon: 'error',
                title: '數據錯誤',
                text: '請重新載入頁面',
                confirmButtonText: '確定'
            });
            return;
        }

        const newRadarData = JSON.parse(newRadarDataElement.textContent || "[]");

        console.log("新的 Radar Data:", newRadarData);

        if (window.myRadarChart) {
            window.myRadarChart.destroy();
        }

        if (newRadarData.length > 0) {
            renderRadarChart("radarChart", newRadarData);
        } else {
            Swal.fire({
                icon: 'warning',
                title: '沒有檢測數據',
                text: '當前日期沒有檢測數據，請選擇其他日期！',
                confirmButtonText: '確定'
            });
        }
    })
    .catch(error => {
        console.error("Fetch Error:", error);
        Swal.fire({
            icon: 'error',
            title: '發生錯誤',
            text: '請稍後再試！',
            confirmButtonText: '確定'
        });
    });
}

// **初始化雷達圖**
function initRadarChart() {
    const radarDataElement = document.getElementById("radarData");
    const radarData = radarDataElement ? JSON.parse(radarDataElement.textContent) : [];

    if (radarData.length > 0) {
        renderRadarChart("radarChart", radarData);
    }
}

// **渲染雷達圖**
    function renderRadarChart(canvasId, radarData) {
        const ctx = document.getElementById(canvasId).getContext("2d");

        // **確保向度按照順序排列**
        const categoryOrder = ["基礎心理技能", "身體心理技能", "認知技能"];

        radarData.sort((a, b) => {
            // 先按照 categoryOrder 排序，確保向度順序正確
            const orderA = categoryOrder.indexOf(a.Dimension);
            const orderB = categoryOrder.indexOf(b.Dimension);
            if (orderA !== orderB) return orderA - orderB;
            return a.CategoryName.localeCompare(b.CategoryName); // 再依分類名稱排序
        });

        // **轉換資料格式**
        const labels = radarData.map(item => `${item.Dimension} - ${item.CategoryName}`);
        const dataValues = radarData.map(item => item.AverageScore);

        // **找出最高分與最低分**
        const maxScore = Math.max(...dataValues);
        const minScore = Math.min(...dataValues);

        const maxIndices = [];
        const minIndices = [];

        dataValues.forEach((value, index) => {
            if (value === maxScore) maxIndices.push(index);
            if (value === minScore) minIndices.push(index);
        });

        if (window.myRadarChart) {
            window.myRadarChart.destroy();
        }

        window.myRadarChart = new Chart(ctx, {
            type: "radar",
            data: {
                labels: labels,
                datasets: [{
                    label: "心理狀態分數",
                    data: dataValues,
                    backgroundColor: "rgba(255, 99, 132, 0.2)",
                    borderColor: "rgba(255, 99, 132, 1)",
                    borderWidth: 2,
                    pointBackgroundColor: dataValues.map((value, index) =>
                        maxIndices.includes(index) ? "red" : minIndices.includes(index) ? "blue" : "black"
                    ),
                    pointBorderColor: "#fff",
                    pointRadius: dataValues.map((value, index) =>
                        maxIndices.includes(index) || minIndices.includes(index) ? 7 : 5
                    ),
                    pointHoverRadius: 9
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: "top"
                    },
                    tooltip: {
                        enabled: true,
                        callbacks: {
                            label: function (tooltipItem) {
                                return `分數: ${tooltipItem.raw}`;
                            }
                        }
                    },
                    datalabels: {
                        color: "black",
                        font: {
                            weight: "bold",
                            size: 14
                        },
                        anchor: "end",
                        align: "top",
                        formatter: function (value) {
                            return value.toFixed(1);
                        }
                    }
                },
                scales: {
                    r: {
                        angleLines: { display: true },
                        suggestedMin: 0,
                        suggestedMax: 5,
                        ticks: {
                            stepSize: 1,
                            backdropColor: "rgba(255, 255, 255, 0.5)"
                        },
                        pointLabels: {
                            font: {
                                size: 14
                            }
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    }
</script>
</body>
</html>