@model IEnumerable<Tiss_MindRadar.ViewModels.TeamReportViewModel>
@{
    ViewBag.Title = "各隊伍選手明細";
    Layout = "~/Views/Shared/_MindRadarLayout.cshtml";
}
<link href="~/MindRadarCss/TeamReportStyle.css" rel="stylesheet" />

<!-- 標題區塊 -->
<div class="text-center mt-10 mb-6">
    <h1 class="text-3xl font-extrabold text-blue-900 drop-shadow-md tracking-wide">各隊伍選手明細</h1>
    <p class="text-gray-500 mt-2">可下載報表或查看詳細資料</p>
</div>

<!-- 查詢區塊 -->
<form id="teamForm" method="post" action="@Url.Action("TeamReportData", "ReportRawData")" class="max-w-4xl mx-auto px-6">
    <div class="flex flex-col md:flex-row items-center gap-4 mb-4">
        <div class="w-full md:flex-1">
            <label for="teamSelect" class="block text-gray-700 font-medium mb-1">選擇隊伍：</label>
            @Html.DropDownList("teamId", ViewBag.Teams as SelectList, "請選擇隊伍", new { @class = "form-input", id = "teamSelect" })
        </div>
        <div class="flex gap-3">
            <button type="button" id="downloadReport" class="btn-primary">
                下載報表
            </button>
            @if (Session["UserID"] != null)
            {
                <a href="@Url.Action("Logout", "UserAccount")" class="btn-danger">
                    登出
                </a>
            }
        </div>
    </div>
    <p id="surveyCountText" class="text-blue-800 font-medium mt-1"></p>
</form>

<!-- 表格資料呈現 -->
@if (Model != null && Model.Any())
{
    <div class="max-w-6xl mx-auto px-6">
        <h3 class="text-xl font-semibold text-blue-800 mb-3 mt-10">隊伍成員與分數</h3>
        <div class="overflow-x-auto bg-white rounded-xl shadow-md">
            <table class="table-auto w-full border border-gray-200">
                <thead class="bg-blue-100 text-blue-900 text-sm font-semibold">
                    <tr>
                        <th class="px-6 py-3 text-left">選手</th>
                        <th class="px-6 py-3 text-left">性別</th>
                        <th class="px-6 py-3 text-left">心理類別</th>
                        <th class="px-6 py-3 text-left">分數</th>
                        <th class="px-6 py-3 text-left">填答日期</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                    @{
                        var groupedData = Model.GroupBy(m => new { m.UserName, m.SurveyDate }).ToList();
                    }
                    @foreach (var group in groupedData)
                    {
                        int rowSpanCount = group.Count();

                        foreach (var (item, index) in group.Select((value, i) => (value, i)))
                        {
                            <tr class="hover:bg-blue-50 text-sm text-gray-700">
                                @if (index == 0)
                                {
                                    <td class="px-6 py-3 font-medium" rowspan="@rowSpanCount" data-label="選手">@item.UserName</td>
                                    <td class="px-6 py-3" rowspan="@rowSpanCount" data-label="性別">@item.Gender</td>
                                }
                                <td class="px-6 py-3" data-label="心理類別">@item.Category</td>
                                <td class="px-6 py-3" data-label="分數">@item.Score</td>
                                @if (index == 0)
                                {
                                    <td class="px-6 py-3" rowspan="@rowSpanCount" data-label="填答日期">@item.SurveyDate.Value.ToString("yyyy/MM/dd")</td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const teamSelect = document.getElementById("teamSelect");
        const form = document.getElementById("teamForm");
        const surveyCountText = document.getElementById("surveyCountText");
        const downloadBtn = document.getElementById("downloadReport");

        function fetchSurveyCount(teamId) {
            fetch('@Url.Action("GetSurveyCountByTeam", "TeamRawData")', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: JSON.stringify({ teamId: teamId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    surveyCountText.textContent = `該隊伍共有 ${data.surveyCount} 人填寫問卷`;
                } else {
                    surveyCountText.textContent = "無法獲取數據";
                }
            })
            .catch(error => {
                console.error("Error fetching survey count:", error);
                surveyCountText.textContent = "發生錯誤，請稍後重試";
            });
        }

        teamSelect.addEventListener("change", function () {
            form.submit();
            const teamId = teamSelect.value;
            if (teamId) {
                fetchSurveyCount(teamId);
            } else {
                surveyCountText.textContent = "";
            }
        });

        downloadBtn.addEventListener("click", function () {
    const teamId = teamSelect.value;
    if (!teamId) {
        alert("請選擇隊伍後再下載報表！");
        return;
    }

    fetch('@Url.Action("ExportTeamReportToExcel", "ReportRawData")', {
        method: "POST",
        headers: {
            "X-Requested-With": "XMLHttpRequest"
        },
        body: new FormData(document.getElementById("teamForm"))
    })
    .then(response => {
        if (!response.ok) throw new Error("下載失敗");

        // **取得 Content-Disposition 標頭**
        const contentDisposition = response.headers.get("Content-Disposition");
        let fileName = "報表.xlsx"; // 預設檔名

        if (contentDisposition) {
            const match = contentDisposition.match(/filename\*=UTF-8''([^;]+)/);
            if (match) {
                fileName = decodeURIComponent(match[1]);
            } else {
                const fallbackMatch = contentDisposition.match(/filename="?(.+?)"?$/);
                if (fallbackMatch) {
                    fileName = fallbackMatch[1];
                }
            }
        }

        return response.blob().then(blob => ({ blob, fileName }));
    })
    .then(({ blob, fileName }) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = fileName; // **這裡設定後端提供的檔名**
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
    })
    .catch(error => alert(error.message));
});

        if (teamSelect.value) {
            fetchSurveyCount(teamSelect.value);
        }
    });
</script>