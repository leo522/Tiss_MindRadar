@model IEnumerable<Tiss_MindRadar.Models.TeamRawDataViewModel>
@using Newtonsoft.Json
@{
    ViewBag.Title = "各隊伍成員分數";
    Layout = "~/Views/Shared/_MindRadarLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="~/RadarChartJS/chart.js"></script>@*雷達圖JS*@
    <script src="~/RadarChartJS/chartjs-plugin-datalabels@2.2.js"></script> @*雷達圖插件*@
    <script src="~/RadarChartJS/TeamChartRawData.js"></script>
</head>
<body>
    <h2 class="text-2xl font-bold text-center mb-6 text-gray-800">各隊伍成員分數</h2>

    <form id="teamForm" method="post" action="@Url.Action("GetMentalStateTeamRawData", "TeamRawData")">
        <div class="mb-4 flex items-center space-x-4">
            <div class="flex-1">
                <label for="teamSelect" class="block text-gray-700 font-bold mb-1">選擇隊伍：</label>
                @Html.DropDownList("teamId", ViewBag.Teams as SelectList, "請選擇隊伍", new { @class = "form-control", id = "teamSelect" })
            </div>

            <div class="flex-1">
                <label for="userSelect" class="block text-gray-700 font-bold mb-1">選擇選手：</label>
                <select id="userSelect" name="userId" class="form-control" disabled>
                    <option value="" selected disabled>請先選擇隊伍</option>
                </select>
            </div>
        </div>
    </form>

    @if (Model.Any())
    {
        <h3 class="text-xl font-bold text-center mt-6 text-gray-700">選手分數資料</h3>
        <table class="min-w-full bg-white shadow-md rounded border border-gray-300 mt-4">
            <thead>
                <tr class="bg-gray-200 text-gray-600 uppercase text-lg leading-normal">
                    <th class="py-3 px-6 text-left">選手</th>
                    <th class="py-3 px-6 text-left">心理類別</th>
                    <th class="py-3 px-6 text-left">分數</th>
                    <th class="py-3 px-6 text-left">檢測日期</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var groupedData = Model.GroupBy(m => new { m.UserName, SurveyDate = m.SurveyDate?.ToString("yyyy/MM/dd") }).ToList();
                }

                @foreach (var group in groupedData)
                {
                    int userRowSpan = group.Count();
                    int dateRowSpan = group.Count();

                    foreach (var (item, index) in group.Select((value, i) => (value, i)))
                    {
                        <tr class="border-b border-gray-200">
                            @if (index == 0)
                            {
                                <td class="py-3 px-6 text-left font-bold" rowspan="@userRowSpan">@item.UserName</td>
                            }
                            <td class="py-3 px-6 text-left">@item.Category</td>
                            <td class="py-3 px-6 text-left">@item.Score</td>
                            @if (index == 0)
                            {
                                <td class="py-3 px-6 text-left" rowspan="@dateRowSpan">@item.SurveyDate.Value.ToString("yyyy/MM/dd")</td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }

    @if (ViewBag.RadarData != null)
    {
        <h3 class="text-xl font-bold text-center mt-6 text-gray-700">心理狀態檢測向度雷達圖</h3>

        <div class="radar-chart-container mt-4" style="display: flex; justify-content: center;"> @*產生雷達圖*@
            <canvas id="radarChart" width="580" height="580"></canvas>
        </div>

        <script id="radarData" type="application/json">
        @Html.Raw(JsonConvert.SerializeObject(ViewBag.RadarData))
        </script>
    }

    @if (ViewBag.PsychologicalDescriptions != null)
    {
        <div class="mt-6">
            <h2 class="text-xl font-bold text-gray-800 mb-4">運動心理技能說明</h2>
            <table class="min-w-full bg-white shadow-md rounded border border-gray-300">
                <thead>
                    <tr class="bg-gray-200 text-gray-600 uppercase text-lg leading-normal">
                        <th class="py-3 px-6 text-left w-1/4">類別</th>
                        <th class="py-3 px-6 text-left w-1/4">心理技能</th>
                        <th class="py-3 px-6 text-left">描述</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        string currentCategory = null;

                        // 轉型避免動態類型錯誤
                        var descriptions = ViewBag.PsychologicalDescriptions as List<Tiss_MindRadar.Models.PsychologicalStateDescription>;

                        // 確保 descriptions 不為 null
                        var categoryRowSpans = descriptions != null
                            ? descriptions.GroupBy(d => d.CategoryName)
                                         .ToDictionary(g => g.Key, g => g.Count())
                            : new Dictionary<string, int>();

                        var categoryItemIndex = new Dictionary<string, int>();

                        foreach (var item in descriptions ?? new List<Tiss_MindRadar.Models.PsychologicalStateDescription>())
                        {
                            string categoryClass = item.CategoryName.Contains("基礎心理技能") ? "bg-yellow-200" :
                                                   item.CategoryName.Contains("身體心理技能") ? "bg-orange-300" :
                                                   item.CategoryName.Contains("認知技能") ? "bg-blue-300" : "";

                            if (!categoryItemIndex.ContainsKey(item.CategoryName))
                            {
                                categoryItemIndex[item.CategoryName] = 1;
                            }
                            else
                            {
                                categoryItemIndex[item.CategoryName]++;
                            }

                            <tr class="border-b border-gray-200">
                                @if (currentCategory != item.CategoryName)
                                {
                                    int categoryRowSpan = categoryRowSpans[item.CategoryName];
                                    <td class="py-3 px-6 text-left font-bold @categoryClass" rowspan="@categoryRowSpan">
                                        @item.CategoryName
                                    </td>
                                    currentCategory = item.CategoryName;
                                }
                                <td class="py-3 px-6 text-left">@categoryItemIndex[item.CategoryName]. @item.SubCategory</td>
                                <td class="py-3 px-6 text-left">@item.DescriptionContent</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const teamSelect = document.getElementById("teamSelect");
            const userSelect = document.getElementById("userSelect");
            const form = document.getElementById("teamForm");
            let radarChartInstance = null; // **存儲 Chart 實例**

            // 隊伍選擇變更
            teamSelect.addEventListener("change", function () {
                userSelect.innerHTML = '<option value="" selected disabled>請選擇選手</option>';
                userSelect.disabled = true;

                let teamId = this.value;
                if (!teamId) return;

                fetch("/TeamRawData/GetUsersByTeam", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ teamId: teamId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.length > 0) {
                            userSelect.disabled = false;
                            data.forEach(user => {
                                let option = document.createElement("option");
                                option.value = user.UserID;
                                option.textContent = user.UserName;
                                userSelect.appendChild(option);
                            });
                        }
                    })
                    .catch(error => console.error("選手載入失敗:", error));
            });

            // 選手選擇變更後自動提交
            userSelect.addEventListener("change", function () {
                form.submit();
            });

            // 解析雷達圖數據
            const radarDataElement = document.getElementById("radarData");
            const radarData = radarDataElement ? JSON.parse(radarDataElement.textContent) : [];

            if (radarData.length > 0) {
                const minMaxData = calculateMinMaxScores(radarData);
                renderRadarChart("radarChart", radarData, minMaxData);
            }

            function renderRadarChart(canvasId, radarData, minMaxData) {
                const canvas = document.getElementById(canvasId);
                const ctx = canvas.getContext("2d");

                // **🔹 銷毀舊的 Chart，避免 `Canvas is already in use` 錯誤**
                if (radarChartInstance instanceof Chart) {
                    radarChartInstance.destroy();
                    radarChartInstance = null;
                }

                // **🔹 設定最高 & 最低分的標記顏色與大小**
                const pointColors = radarData.map(d =>
                    minMaxData.maxCategories.includes(d.CategoryName) ? "red" :
                        minMaxData.minCategories.includes(d.CategoryName) ? "blue" :
                            "rgba(255, 99, 132, 1)"
                );

                const pointSizes = radarData.map(d =>
                    minMaxData.maxCategories.includes(d.CategoryName) || minMaxData.minCategories.includes(d.CategoryName) ? 10 : 5
                );

                // **🔹 繪製雷達圖**
                radarChartInstance = new Chart(ctx, {
                    type: "radar",
                    data: {
                        labels: radarData.map(d => d.CategoryName),
                        datasets: [{
                            label: "心理狀態",
                            data: radarData.map(d => d.AverageScore),
                            backgroundColor: "rgba(255, 99, 132, 0.2)",
                            borderColor: "rgba(255, 99, 132, 1)",
                            pointBackgroundColor: pointColors,
                            pointRadius: pointSizes,
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: false,
                        scales: {
                            r: {
                                angleLines: { display: true },
                                suggestedMin: 0,
                                suggestedMax: 5,
                                pointLabels: { font: { size: 14 } },
                                ticks: {
                                    font: { size: 12 },
                                    stepSize: 1,
                                    callback: function (value) {
                                        return Math.round(value);
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: true,
                                position: "top"
                            },
                            datalabels: {
                                color: function (context) {
                                    let value = context.dataset.data[context.dataIndex];
                                    return value === minMaxData.maxScore ? "red" :
                                        value === minMaxData.minScore ? "blue" :
                                            "black";
                                },
                                anchor: "center",   // 🔹 讓數值標籤跟隨數據點位置
                                align: function (context) {
                                    let value = context.dataset.data[context.dataIndex];
                                    return value === minMaxData.maxScore ? "right" : // 最高分往右移
                                        value === minMaxData.minScore ? "left" :  // 最低分往左移
                                            "top";
                                },
                                offset: 15,        // 🔹 增加偏移，讓數字遠離點
                                font: {
                                    size: 16,
                                    weight: "bold"
                                },
                                formatter: function (value) {
                                    if (value === minMaxData.maxScore) {
                                        return `⬆ ${value.toFixed(1)}`;
                                    }
                                    if (value === minMaxData.minScore) {
                                        return `⬇ ${value.toFixed(1)}`;
                                    }
                                    return value.toFixed(1);
                                }
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                });
            }
        });
    </script>
</body>
</html>