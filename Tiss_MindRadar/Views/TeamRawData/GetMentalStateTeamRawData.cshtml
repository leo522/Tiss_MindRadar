@model IEnumerable<Tiss_MindRadar.Models.TeamRawDataViewModel>
@using Newtonsoft.Json
@{
    ViewBag.Title = "心理狀態檢測_各隊伍成員分數";
    Layout = "~/Views/Shared/_MindRadarLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="~/RadarChartJS/chart.js"></script>@*雷達圖JS*@
    <script src="~/RadarChartJS/chartjs-plugin-datalabels@2.2.js"></script> @*雷達圖插件*@
    <script src="~/RadarChartJS/TeamChartRawData.js"></script> @*計算最高 & 最低分*@
</head>
<body>
    <h2 class="text-2xl font-bold text-center mb-6 text-gray-800">心理狀態檢測_各隊伍成員分數</h2>
    <div class="text-right mb-4">
        <a href="@Url.Action("TeamReportData", "ReportRawData")" class="btn btn-primary">
            查詢各隊伍選手明細
        </a>
        @if (Session["UserID"] != null)
        {
            <a href="@Url.Action("Logout", "UserAccount")"
               class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                登出
            </a>
        }
    </div>

    <form id="teamForm" method="post" action="@Url.Action("GetMentalStateTeamRawData", "TeamRawData")">
        <div class="mb-4 flex items-center space-x-4">
            <div class="flex-1">
                <label for="teamSelect" class="block text-gray-700 font-bold mb-1">選擇隊伍：</label>
                @Html.DropDownList("teamId", ViewBag.Teams as SelectList, "請選擇隊伍", new { @class = "form-control", id = "teamSelect" })
            </div>

            <div class="flex-1">
                <label for="userSelect" class="block text-gray-700 font-bold mb-1">選擇選手：</label>
                <select id="userSelect" name="userId" class="form-control" disabled data-placeholder="請選擇選手"></select>
            </div>
        </div>
    </form>

    @if (Model.Any())
    {
        <h3 class="text-xl font-bold text-center mt-6 text-gray-700">選手分數資料</h3>
        <table class="min-w-full bg-white shadow-md rounded border border-gray-300 mt-4">
            <thead>
                <tr class="bg-gray-200 text-gray-600 uppercase text-lg leading-normal">
                    <th class="py-3 px-6 text-left">選手</th>
                    <th class="py-3 px-6 text-left">心理類別</th>
                    <th class="py-3 px-6 text-left">分數</th>
                    <th class="py-3 px-6 text-left">檢測日期</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var groupedData = Model.GroupBy(m => new { m.UserName, SurveyDate = m.SurveyDate?.ToString("yyyy/MM/dd") }).ToList();
                }

                @foreach (var group in groupedData)
                {
                    int userRowSpan = group.Count();
                    int dateRowSpan = group.Count();

                    foreach (var (item, index) in group.Select((value, i) => (value, i)))
                    {
                        <tr class="border-b border-gray-200">
                            @if (index == 0)
                            {
                                <td class="py-3 px-6 text-left font-bold" rowspan="@userRowSpan">@item.UserName</td>
                            }
                            <td class="py-3 px-6 text-left">@item.Category</td>
                            <td class="py-3 px-6 text-left">@item.Score</td>
                            @if (index == 0)
                            {
                                <td class="py-3 px-6 text-left" rowspan="@dateRowSpan">@item.SurveyDate.Value.ToString("yyyy/MM/dd")</td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }

    @if (ViewBag.RadarData != null)
    {
        <h3 class="text-xl font-bold text-center mt-6 text-gray-700">心理狀態檢測向度雷達圖</h3>

        <div class="radar-chart-container mt-4" style="display: flex; justify-content: center;">
            @*產生雷達圖*@
            <canvas id="radarChart" style="max-width: 600px; max-height: 600px;"></canvas>
        </div>

        <script id="radarData" type="application/json">
        @Html.Raw(JsonConvert.SerializeObject(ViewBag.RadarData))
        </script>
    }
    @if (ViewBag.PsychologicalHeaders != null && ViewBag.PsychologicalDescriptions != null && ViewBag.MentalStateQuestions != null)
    {
        <div class="mt-6">
            <h2 class="text-xl font-bold text-gray-800 mb-4">運動心理技能說明</h2>
            <table class="min-w-full w-full bg-white shadow-md rounded border border-gray-300">
                <tbody>
                    @{
                        var descriptions = ViewBag.PsychologicalDescriptions as List<Tiss_MindRadar.Models.PsychologicalStateDescription>;
                        var questions = ViewBag.MentalStateQuestions as List<Tiss_MindRadar.Models.MentalState>;

                        string currentCategory = null;
                        var categoryRowSpans = descriptions.GroupBy(d => d.CategoryName).ToDictionary(g => g.Key, g => g.Count());
                        var categoryItemIndex = new Dictionary<string, int>();

                        foreach (var header in ViewBag.PsychologicalHeaders)
                        {
                            var firstCategory = descriptions.FirstOrDefault(d => d.HeaderID == header.ID)?.CategoryName ?? "";
                            string headerClass = firstCategory.Contains("基礎") ? "bg-yellow-200" :
                                                 firstCategory.Contains("身體") ? "bg-orange-300" :
                                                 firstCategory.Contains("認知") ? "bg-blue-300" : "bg-gray-200";

                            <tr class="@headerClass">
                                <td colspan="4" class="py-3 px-6 font-bold text-lg">@header.HeaderText</td>
                            </tr>

                            var filteredDescriptions = descriptions.Where(d => d.HeaderID == header.ID).ToList();
                            foreach (var item in filteredDescriptions)
                            {
                                string categoryClass = item.CategoryName.Contains("基礎") ? "bg-yellow-200" :
                                                       item.CategoryName.Contains("身體") ? "bg-orange-300" :
                                                       item.CategoryName.Contains("認知") ? "bg-blue-300" : "";

                                if (!categoryItemIndex.ContainsKey(item.CategoryName))
                                {
                                    categoryItemIndex[item.CategoryName] = 1;
                                }
                                else
                                {
                                    categoryItemIndex[item.CategoryName]++;
                                }

                                <tr class="border-b border-gray-200">
                                    @if (currentCategory != item.CategoryName)
                                    {
                                        int rowspan = categoryRowSpans[item.CategoryName];
                                        <td class="py-3 px-6 text-left font-bold @categoryClass" rowspan="@rowspan">
                                            @item.CategoryName
                                        </td>
                                        currentCategory = item.CategoryName;
                                    }
                                    <td class="py-3 px-6">@categoryItemIndex[item.CategoryName]. @item.SubCategory</td>
                                    <td class="py-3 px-6">@item.DescriptionContent</td>
                                    <td class="py-3 px-6">
                                        <ul class="list-disc ml-5">
                                            @foreach (var q in questions.Where(q => q.CategoryID == item.ID).OrderBy(q => q.QuestionNumber))
                                            {
                                                <li>@q.QuestionNumber. @q.QuestionText</li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    }

    <script>
document.addEventListener("DOMContentLoaded", function () {
    const teamSelect = document.getElementById("teamSelect");
    const userSelect = document.getElementById("userSelect");
    const form = document.getElementById("teamForm");
    let radarChartInstance = null;

    // 取得當前選擇的隊伍與選手
    let selectedTeamId = "@(Request["teamId"] ?? "")";
    let selectedUserId = "@(Request["userId"] ?? "")";

    // 設定 `placeholder`
    function setPlaceholder() {
        let placeholderOption = document.createElement("option");
        placeholderOption.value = "";
        placeholderOption.textContent = userSelect.getAttribute("data-placeholder") || "請選擇選手";
        placeholderOption.disabled = true;
        userSelect.appendChild(placeholderOption);
    }

    // 初始化選手選單
    function initializeUserSelect() {
        userSelect.innerHTML = "";
        setPlaceholder();
        userSelect.disabled = true;
    }

    initializeUserSelect();

    // 若已有選擇隊伍，則載入選手
    if (selectedTeamId) {
        teamSelect.value = selectedTeamId;
        loadUsersByTeam(selectedTeamId, selectedUserId);
    }

    // 監聽隊伍變更事件
    teamSelect.addEventListener("change", function () {
        let teamId = this.value;
        if (!teamId) return;
        loadUsersByTeam(teamId, "");
    });

    function loadUsersByTeam(teamId, selectedUser = "") {
        userSelect.disabled = true;
        userSelect.innerHTML = "";
        setPlaceholder();

        fetch("/TeamRawData/GetUsersByTeam", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ teamId: teamId })
        })
        .then(response => response.json())
        .then(data => {
            userSelect.innerHTML = "";
            if (data.length > 0) {
                let defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "請選擇選手";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                userSelect.appendChild(defaultOption);

                data.forEach(user => {
                    let option = document.createElement("option");
                    option.value = user.UserID;
                    option.textContent = user.UserName;
                    if (user.UserID.toString() === selectedUser) {
                        option.selected = true;
                    }
                    userSelect.appendChild(option);
                });

                userSelect.disabled = false;
            } else {
                initializeUserSelect();
            }
        })
        .catch(error => console.error("選手載入失敗:", error));
    }

    // 監聽選手變更，檢查是否有數據，無則彈出 SweetAlert2
    userSelect.addEventListener("change", function (event) {
        let selectedUserId = this.value;
        if (!selectedUserId) return;

        fetch("/TeamRawData/CheckUserData", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ userId: selectedUserId })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                Swal.fire({
                    icon: "warning",
                    title: "無填寫資料",
                    text: data.message,
                    confirmButtonText: "確定"
                });

                userSelect.value = "";
            } else {
                form.submit();
            }
        })
        .catch(error => {
            console.error("錯誤:", error);
        });
    });

    // **雷達圖部分**
    const radarDataElement = document.getElementById("radarData");
    const radarData = radarDataElement ? JSON.parse(radarDataElement.textContent) : [];

    if (radarData.length > 0) {
        renderRadarChart("radarChart", radarData);
    }

    function renderRadarChart(canvasId, radarData) {
        const ctx = document.getElementById(canvasId).getContext("2d");

        if (radarChartInstance instanceof Chart) {
            radarChartInstance.destroy();
        }

        // 分組：以 SurveyDate 為 key
        const grouped = {};
        radarData.forEach(item => {
            if (!grouped[item.SurveyDate]) grouped[item.SurveyDate] = [];
            grouped[item.SurveyDate].push(item);
        });

        // 標籤 = 向度-子分類名稱
        const labels = [...new Set(radarData.map(d => `${d.Dimension} - ${d.CategoryName}`))];

        const colorSet = [
            "rgba(255,99,132,0.6)",
            "rgba(54,162,235,0.6)",
            "rgba(75,192,192,0.6)",
            "rgba(255,206,86,0.6)"
        ];

        const datasets = Object.keys(grouped).map((date, i) => {
            const data = grouped[date];
            const scores = data.map(d => d.AverageScore);
            const max = Math.max(...scores);
            const min = Math.min(...scores);
            const maxIndices = [], minIndices = [];

            scores.forEach((v, i) => {
                if (v === max) maxIndices.push(i);
                if (v === min) minIndices.push(i);
            });

            return {
                label: `心理狀態分數（${date}）`,
                data: scores,
                backgroundColor: colorSet[i % colorSet.length],
                borderColor: colorSet[i % colorSet.length].replace("0.6", "1"),
                borderWidth: 2,
                pointBackgroundColor: scores.map((v, i) =>
                    maxIndices.includes(i) ? "red" :
                        minIndices.includes(i) ? "blue" : "black"),
                pointRadius: scores.map((v, i) =>
                    maxIndices.includes(i) || minIndices.includes(i) ? 7 : 5),
                pointHoverRadius: 9
            };
        });

        radarChartInstance = new Chart(ctx, {
            type: "radar",
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: true, position: "top" },
                    tooltip: {
                        callbacks: {
                            label: context => `分數: ${context.raw}`
                        }
                    },
                    datalabels: {
                        color: "#000",
                        font: { size: 12, weight: "bold" },
                        formatter: value => value.toFixed(1)
                    }
                },
                scales: {
                    r: {
                        suggestedMin: 0,
                        suggestedMax: 5,
                        ticks: { stepSize: 1 },
                        pointLabels: {
                            font: { size: 14 }
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    }

});
    </script>
</body>
</html>