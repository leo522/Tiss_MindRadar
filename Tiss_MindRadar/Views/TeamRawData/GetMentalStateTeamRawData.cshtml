@model IEnumerable<Tiss_MindRadar.Models.TeamRawDataViewModel>
@using Newtonsoft.Json
@{
    ViewBag.Title = "心理狀態檢測_各隊伍成員分數";
    Layout = "~/Views/Shared/_MindRadarLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="~/RadarChartJS/chart.js"></script>@*雷達圖JS*@
    <script src="~/RadarChartJS/chartjs-plugin-datalabels@2.2.js"></script> @*雷達圖插件*@
    <script src="~/RadarChartJS/TeamChartRawData.js"></script> @*計算最高 & 最低分*@
</head>
<body>
    <h2 class="text-2xl font-bold text-center mb-6 text-gray-800">心理狀態檢測_各隊伍成員分數</h2>
    <div class="text-right mb-4">
        <a href="@Url.Action("TeamReportData", "ReportRawData")" class="btn btn-primary">
            查詢各隊伍選手明細
        </a>
        @if (Session["UserID"] != null)
        {
            <a href="@Url.Action("Logout", "UserAccount")"
               class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                登出
            </a>
        }
    </div>

    <form id="teamForm" method="post" action="@Url.Action("GetMentalStateTeamRawData", "TeamRawData")">
        <div class="mb-4 flex items-center space-x-4">
            <div class="flex-1">
                <label for="teamSelect" class="block text-gray-700 font-bold mb-1">選擇隊伍：</label>
                @Html.DropDownList("teamId", ViewBag.Teams as SelectList, "請選擇隊伍", new { @class = "form-control", id = "teamSelect" })
            </div>

            <div class="flex-1">
                <label for="userSelect" class="block text-gray-700 font-bold mb-1">選擇選手：</label>
                <select id="userSelect" name="userId" class="form-control" disabled data-placeholder="請選擇選手"></select>
            </div>
        </div>
    </form>

    @if (Model.Any())
    {
        <h3 class="text-xl font-bold text-center mt-6 text-gray-700">選手分數資料</h3>
        <table class="min-w-full bg-white shadow-md rounded border border-gray-300 mt-4">
            <thead>
                <tr class="bg-gray-200 text-gray-600 uppercase text-lg leading-normal">
                    <th class="py-3 px-6 text-left">選手</th>
                    <th class="py-3 px-6 text-left">心理類別</th>
                    <th class="py-3 px-6 text-left">分數</th>
                    <th class="py-3 px-6 text-left">檢測日期</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var groupedData = Model.GroupBy(m => new { m.UserName, SurveyDate = m.SurveyDate?.ToString("yyyy/MM/dd") }).ToList();
                }

                @foreach (var group in groupedData)
                {
                    int userRowSpan = group.Count();
                    int dateRowSpan = group.Count();

                    foreach (var (item, index) in group.Select((value, i) => (value, i)))
                    {
                        <tr class="border-b border-gray-200">
                            @if (index == 0)
                            {
                                <td class="py-3 px-6 text-left font-bold" rowspan="@userRowSpan">@item.UserName</td>
                            }
                            <td class="py-3 px-6 text-left">@item.Category</td>
                            <td class="py-3 px-6 text-left">@item.Score</td>
                            @if (index == 0)
                            {
                                <td class="py-3 px-6 text-left" rowspan="@dateRowSpan">@item.SurveyDate.Value.ToString("yyyy/MM/dd")</td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }

    @if (ViewBag.RadarData != null)
    {
        <h3 class="text-xl font-bold text-center mt-6 text-gray-700">心理狀態檢測向度雷達圖</h3>

        <div class="radar-chart-container mt-4" style="display: flex; justify-content: center;">
            @*產生雷達圖*@
            <canvas id="radarChart" width="580" height="580"></canvas>
        </div>

        <script id="radarData" type="application/json">
        @Html.Raw(JsonConvert.SerializeObject(ViewBag.RadarData))
        </script>
    }

    @if (ViewBag.PsychologicalDescriptions != null)
    {
        <div class="mt-6">
            <h2 class="text-xl font-bold text-gray-800 mb-4">運動心理技能說明</h2>
            <table class="min-w-full bg-white shadow-md rounded border border-gray-300">
                <thead>
                    <tr class="bg-gray-200 text-gray-600 uppercase text-lg leading-normal">
                        <th class="py-3 px-6 text-left w-1/4">類別</th>
                        <th class="py-3 px-6 text-left w-1/4">心理技能</th>
                        <th class="py-3 px-6 text-left">描述</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        string currentCategory = null;

                        // 轉型避免動態類型錯誤
                        var descriptions = ViewBag.PsychologicalDescriptions as List<Tiss_MindRadar.Models.PsychologicalStateDescription>;

                        // 確保 descriptions 不為 null
                        var categoryRowSpans = descriptions != null
                            ? descriptions.GroupBy(d => d.CategoryName)
                                         .ToDictionary(g => g.Key, g => g.Count())
                            : new Dictionary<string, int>();

                        var categoryItemIndex = new Dictionary<string, int>();

                        foreach (var item in descriptions ?? new List<Tiss_MindRadar.Models.PsychologicalStateDescription>())
                        {
                            string categoryClass = item.CategoryName.Contains("基礎心理技能") ? "bg-yellow-200" :
                                                   item.CategoryName.Contains("身體心理技能") ? "bg-orange-300" :
                                                   item.CategoryName.Contains("認知技能") ? "bg-blue-300" : "";

                            if (!categoryItemIndex.ContainsKey(item.CategoryName))
                            {
                                categoryItemIndex[item.CategoryName] = 1;
                            }
                            else
                            {
                                categoryItemIndex[item.CategoryName]++;
                            }

                            <tr class="border-b border-gray-200">
                                @if (currentCategory != item.CategoryName)
                                {
                                    int categoryRowSpan = categoryRowSpans[item.CategoryName];
                                    <td class="py-3 px-6 text-left font-bold @categoryClass" rowspan="@categoryRowSpan">
                                        @item.CategoryName
                                    </td>
                                    currentCategory = item.CategoryName;
                                }
                                <td class="py-3 px-6 text-left">@categoryItemIndex[item.CategoryName]. @item.SubCategory</td>
                                <td class="py-3 px-6 text-left">@item.DescriptionContent</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }

    <script>
document.addEventListener("DOMContentLoaded", function () {
    const teamSelect = document.getElementById("teamSelect");
    const userSelect = document.getElementById("userSelect");
    const form = document.getElementById("teamForm");
    let radarChartInstance = null;

    // 取得當前選擇的隊伍與選手
    let selectedTeamId = "@(Request["teamId"] ?? "")";
    let selectedUserId = "@(Request["userId"] ?? "")";

    // 設定 `placeholder`
    function setPlaceholder() {
        let placeholderOption = document.createElement("option");
        placeholderOption.value = "";
        placeholderOption.textContent = userSelect.getAttribute("data-placeholder") || "請選擇選手";
        placeholderOption.disabled = true;
        userSelect.appendChild(placeholderOption);
    }

    // 初始化選手選單
    function initializeUserSelect() {
        userSelect.innerHTML = "";
        setPlaceholder();
        userSelect.disabled = true;
    }

    initializeUserSelect();

    // 若已有選擇隊伍，則載入選手
    if (selectedTeamId) {
        teamSelect.value = selectedTeamId;
        loadUsersByTeam(selectedTeamId, selectedUserId);
    }

    // 監聽隊伍變更事件
    teamSelect.addEventListener("change", function () {
        let teamId = this.value;
        if (!teamId) return;
        loadUsersByTeam(teamId, "");
    });

    function loadUsersByTeam(teamId, selectedUser = "") {
        userSelect.disabled = true;
        userSelect.innerHTML = "";
        setPlaceholder();

        fetch("/TeamRawData/GetUsersByTeam", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ teamId: teamId })
        })
        .then(response => response.json())
        .then(data => {
            userSelect.innerHTML = "";
            if (data.length > 0) {
                let defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "請選擇選手";
                defaultOption.disabled = true;
                userSelect.appendChild(defaultOption);

                data.forEach(user => {
                    let option = document.createElement("option");
                    option.value = user.UserID;
                    option.textContent = user.UserName;
                    if (user.UserID.toString() === selectedUser) {
                        option.selected = true;
                    }
                    userSelect.appendChild(option);
                });

                userSelect.disabled = false;
            } else {
                initializeUserSelect();
            }
        })
        .catch(error => console.error("選手載入失敗:", error));
    }

    // 監聽選手變更，檢查是否有數據，無則彈出 SweetAlert2
    userSelect.addEventListener("change", function (event) {
        let selectedUserId = this.value;
        if (!selectedUserId) return;

        fetch("/TeamRawData/CheckUserData", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ userId: selectedUserId })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                Swal.fire({
                    icon: "warning",
                    title: "無填寫資料",
                    text: data.message,
                    confirmButtonText: "確定"
                });

                userSelect.value = "";
            } else {
                form.submit();
            }
        })
        .catch(error => {
            console.error("錯誤:", error);
        });
    });

    // **雷達圖部分**
    const radarDataElement = document.getElementById("radarData");
    const radarData = radarDataElement ? JSON.parse(radarDataElement.textContent) : [];

    if (radarData.length > 0) {
        renderRadarChart("radarChart", radarData);
    }

    function renderRadarChart(canvasId, radarData) {
        const canvas = document.getElementById(canvasId);
        const ctx = canvas.getContext("2d");

        if (radarChartInstance instanceof Chart) {
            radarChartInstance.destroy();
        }

        radarChartInstance = new Chart(ctx, {
            type: "radar",
            data: {
                labels: radarData.map(d => d.CategoryName),
                datasets: [{
                    label: "心理狀態",
                    data: radarData.map(d => d.AverageScore),
                    backgroundColor: "rgba(255, 99, 132, 0.2)",
                    borderColor: "rgba(255, 99, 132, 1)",
                    pointBackgroundColor: radarData.map(d =>
                        d.IsMax ? "red" : d.IsMin ? "blue" : "rgba(255, 99, 132, 1)"
                    ),
                    pointRadius: radarData.map(d =>
                        d.IsMax || d.IsMin ? 10 : 5
                    ),
                    borderWidth: 2
                }]
            },
            options: {
                responsive: false,
                scales: {
                    r: {
                        suggestedMin: 0,
                        suggestedMax: 5,
                        pointLabels: { font: { size: 14 } },
                        ticks: {
                            stepSize: 1,
                            font: { size: 12 }
                        }
                    }
                },
                plugins: {
                    legend: { display: true, position: "top" },
                    datalabels: {
                        color: function (context) {
                            let value = context.dataset.data[context.dataIndex];
                            return value === Math.max(...radarData.map(d => d.AverageScore)) ? "red" :
                                   value === Math.min(...radarData.map(d => d.AverageScore)) ? "blue" :
                                   "black";
                        },
                        anchor: "center",
                        align: function (context) {
                            let value = context.dataset.data[context.dataIndex];
                            return value === Math.max(...radarData.map(d => d.AverageScore)) ? "right" :
                                   value === Math.min(...radarData.map(d => d.AverageScore)) ? "left" :
                                   "top";
                        },
                        offset: 15,
                        font: { size: 16, weight: "bold" },
                        formatter: function (value) {
                            if (value === Math.max(...radarData.map(d => d.AverageScore))) {
                                return `⬆ ${value.toFixed(1)}`;
                            }
                            if (value === Math.min(...radarData.map(d => d.AverageScore))) {
                                return `⬇ ${value.toFixed(1)}`;
                            }
                            return value.toFixed(1);
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    }
});
    </script>
</body>
</html>